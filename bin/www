#!/usr/bin/env node

/**
 * Module dependencies.
 */
const {app} = require('../app'); // Express app
const debug = require('debug')('yourappname:server');
const http = require('http');
const server = http.createServer(app);
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Socket.IO setup is abstracted to 'socketApi.js'
const socketIoPlugin = require('../plugins/socket_io/setup');
socketIoPlugin.setupSocketIO(server);

// Normalize port function remains unchanged
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// Error handling remains unchanged
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Listening event remains unchanged
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Listen on provided port
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
