<div id="chat-window-basic">
    <h1>Room: Main Chat </h1>
    <%- include('../animations/confetti')%>
    <button id="chatToggle">chat</button>
    <% if(typeof user === 'object' && user) { %>
        <script>var firstName = "<%= user.firstName %>";</script>
        
          
            <div id="userList">
                <div class="loaderWheel">
                    <div class="loaderDiv">  <h3> loading chatroom...</h3></div>
                    <div class="loaderDiv"> <div class="wheel"></div></div>
                  
                   
                </div>
            <!--My Users Populate Here div class="userOnline"-->
            </div>
      <div class="inputBar">
            <input id="chatInput" autocomplete="off" /><button id="submitChat">Send</button>
        </div>
        <div id="chat">
        
            <div id="messages"> </div>
        </div>
        <%let userImg=user.userImg%>
    <% } else { %>
        <p>Please log in to join the chat.</p>
    <% } %>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>

    document.addEventListener('DOMContentLoaded', ()=>{

    var socket = io('/main_chat'); 

    // Function to add messages to the DOM
    function addMessage(messageObject, isOwnMessage = false) {
    var messagesContainer = document.getElementById('messages');
    var messageDiv = document.createElement('div');
    var messageAvatar = document.createElement('img');
    messageAvatar.className = 'usersOnline';

   
        // Use the thumbnailUrl from the message object, with a fallback to a default image
        messageAvatar.src = messageObject.thumbnailUrl ? `${messageObject.thumbnailUrl}` : `/images/userHeadshots/defaultThumbnail.png`;
   

    var userNameSpan = document.createElement('span');
    userNameSpan.className = 'messageUser';
    userNameSpan.textContent = isOwnMessage ? "You: " : messageObject.user.firstName + ': ';

    var messageTextSpan = document.createElement('span');
    messageTextSpan.className = 'messageText';
    messageTextSpan.textContent = messageObject.text;

    messageDiv.appendChild(messageAvatar);
    messageDiv.appendChild(userNameSpan);
    messageDiv.appendChild(messageTextSpan);

    messagesContainer.appendChild(messageDiv);
}



    // Add click event listener to the submit button
    var submitChat = document.getElementById('submitChat');
    if (submitChat) {
       submitChat.addEventListener('click', function(event) {
    var input = document.getElementById('chatInput');
    var message = input.value.trim();

    if (message !== '') {
        // Construct a message object similar to what's expected
        let messageObject = { text: message, user: {firstName: "You"}, thumbnailUrl: null }; // Adjust as necessary
        socket.emit('chat message', message); // Emit the message
        addMessage(messageObject, true); // Add message to the DOM, indicating it's the user's own
        input.value = ''; // Clear the input
    }
});

    } else {
        console.log('Submit Chat button not found'); // Debugging: Check if button is found
    }

    // Listen for chat messages from the server
    socket.on('chat message', function(msg) {
        addMessage(msg, false); // Add incoming message to the DOM
    });
    socket.on('user list', function(users) {
    var userList = document.getElementById('userList');
    userList.innerHTML = ''; // Clear current list
    users.forEach(function(user) {
        var div = document.createElement('div');
        div.className = 'usersOnline';
        var img = document.createElement('img');
        img.className = 'userImage'; // Assign a class for styling if needed
        img.alt = user.userName; // Use `userName` for alt text
        // Use `avatarThumbnailUrl` for the image source. 
        // Remember to handle the case where `avatarThumbnailUrl` might be null or an empty string
        img.src = user.avatarThumbnailUrl ? `${user.avatarThumbnailUrl}` : '/path/to/default/avatar/image.jpg'; 
        var text = document.createElement('span');
        text.style.position="absolute";
        text.style.left="0";
        text.style.bottom="0";
        text.style.textAlign="center";
        text.textContent = user.userName; // Use `userName` to show the user's name next to the image
        
        div.appendChild(img); // Add the user image
        div.appendChild(text); // Add the user name text
        userList.appendChild(div); // Append this div to the userList container
    });
});


    // Error handling for Socket.IO
    socket.on('connect_error', (error) => {
        console.log('Connection Error:', error); // Log connection errors
    });
    socket.on('ping', (data) => {
                console.log(data.msg); // Logging the ping message from the server

                // Optionally, send a pong message back to the server
                socket.emit('pong', { msg: 'Pong from client' });
            });
      
    console.log('basic Chat!!')
})
document.addEventListener('DOMContentLoaded', ()=>{
    let chatWindowState = null;
const chatToggle = document.getElementById('chatToggle');
const chatBasicWindow = document.getElementById('chat-window-basic');
const main = document.getElementById('main')
chatToggle.addEventListener('click', ()=>{
    if(chatBasicWindow.style.transform!="translateX(-106%)"){
        chatBasicWindow.style.transform="translateX(-106%)";
  
   chatToggle.innerHTML="close";  
   chatWindowState="open"   
}else{
   
    chatBasicWindow.style.transform="translateX(0%)";
    chatToggle.innerHTML="chat";  
    chatWindowState="hidden"   ;
}
})
})




</script>