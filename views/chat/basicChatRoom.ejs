<h1>Video Chatroom</h1>
<style>
    #videos {
        display: flex;
        flex-wrap: wrap;
    }

    .video-container {
        width: 150px; /* Set the maximum width */
        margin: 10px;
    }

    .video-container video {
        max-width: 100%; /* Set the maximum width for the video */
    }
</style>

<%if(typeof user == 'object' && user){%>
    <p>Welcome, <%= user.username %>!</p>
    <!-- Display video chat interface -->
    <div id="videoChat">
        <!-- Video streams will be displayed here -->
        <div id="videos"></div>
    </div>
<% } else { %>
    <p>Please log in to join the chat.</p>
<% } %>

<!-- Include Socket.IO library -->
<script src="/socket.io/socket.io.js"></script>
<script>
    // Establish a connection to the server
    var socket = io();

    // Function to add or update video stream in the chat interface
    function updateVideoStream(stream, userId) {
        var videoContainer = document.getElementById('videos');
        var existingVideo = videoContainer.querySelector('[data-userid="' + userId + '"]');

        if (existingVideo) {
            // Update existing video stream
            existingVideo.srcObject = stream;
        } else {
            // Add new video stream
            var videoElement = document.createElement('video');
            videoElement.autoplay = true;
            videoElement.srcObject = stream;
            videoElement.setAttribute('data-userid', userId);
            
            var videoContainer = document.createElement('div');
            videoContainer.className = 'video-container';
            videoContainer.appendChild(videoElement);
            
            document.getElementById('videos').appendChild(videoContainer);
        }
    }

    // Function to remove video stream when a user leaves
    function removeVideoStream(userId) {
        var videoContainer = document.getElementById('videos');
        var videoToRemove = videoContainer.querySelector('[data-userid="' + userId + '"]');
        if (videoToRemove) {
            videoToRemove.parentNode.remove(); // Remove the parent container
        }
    }

    // Receive video streams from the server
    socket.on('user-connected', function(userId, stream) {
        updateVideoStream(stream, userId);
    });

    // Remove video streams when a user leaves
    socket.on('user-disconnected', function(userId) {
        removeVideoStream(userId);
    });

    // Capture user's own video stream
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(function(stream) {
            // Display user's own video stream
            updateVideoStream(stream, 'self');

            // Send user's video stream to the server
            socket.emit('join-room', roomId, stream);

            // Listen for new users joining and send user's own stream to them
            socket.on('user-connected', function(userId) {
                socket.emit('send-stream', userId, stream);
            });
        })
        .catch(function(err) {
            console.error('Error accessing the webcam:', err);
        });
</script>
